/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.CommentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1893597115;

    /**
     * The reference instance of <code>public.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>public.comment.id</code>.
     */
    public final TableField<CommentRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.comment.content</code>.
     */
    public final TableField<CommentRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.comment.user_id</code>.
     */
    public final TableField<CommentRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.comment.book_id</code>.
     */
    public final TableField<CommentRecord, UUID> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_ID_UINDEX);
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.COMMENT_PK;
    }

    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.COMMENT_PK);
    }

    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT__COMMENT_USER_ID_FK, Keys.COMMENT__COMMENT_BOOK_ID_FK);
    }

    public Author author() {
        return new Author(this, Keys.COMMENT__COMMENT_USER_ID_FK);
    }

    public Book book() {
        return new Book(this, Keys.COMMENT__COMMENT_BOOK_ID_FK);
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
