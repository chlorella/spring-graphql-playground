/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.BookCommentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookComment extends TableImpl<BookCommentRecord> {

    private static final long serialVersionUID = -1558992422;

    /**
     * The reference instance of <code>public.book_comment</code>
     */
    public static final BookComment BOOK_COMMENT = new BookComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookCommentRecord> getRecordType() {
        return BookCommentRecord.class;
    }

    /**
     * The column <code>public.book_comment.book_id</code>.
     */
    public final TableField<BookCommentRecord, UUID> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.book_comment.comment_id</code>.
     */
    public final TableField<BookCommentRecord, UUID> COMMENT_ID = createField(DSL.name("comment_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.book_comment</code> table reference
     */
    public BookComment() {
        this(DSL.name("book_comment"), null);
    }

    /**
     * Create an aliased <code>public.book_comment</code> table reference
     */
    public BookComment(String alias) {
        this(DSL.name(alias), BOOK_COMMENT);
    }

    /**
     * Create an aliased <code>public.book_comment</code> table reference
     */
    public BookComment(Name alias) {
        this(alias, BOOK_COMMENT);
    }

    private BookComment(Name alias, Table<BookCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookComment(Name alias, Table<BookCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BookComment(Table<O> child, ForeignKey<O, BookCommentRecord> key) {
        super(child, key, BOOK_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BookCommentRecord> getPrimaryKey() {
        return Keys.BOOK_COMMENT_PK;
    }

    @Override
    public List<UniqueKey<BookCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<BookCommentRecord>>asList(Keys.BOOK_COMMENT_PK);
    }

    @Override
    public List<ForeignKey<BookCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookCommentRecord, ?>>asList(Keys.BOOK_COMMENT__BOOK_COMMENT_BOOK_ID_FK);
    }

    public Book book() {
        return new Book(this, Keys.BOOK_COMMENT__BOOK_COMMENT_BOOK_ID_FK);
    }

    @Override
    public BookComment as(String alias) {
        return new BookComment(DSL.name(alias), this);
    }

    @Override
    public BookComment as(Name alias) {
        return new BookComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookComment rename(String name) {
        return new BookComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookComment rename(Name name) {
        return new BookComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
