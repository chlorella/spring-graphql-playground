/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.generated.tables.Comment;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record4<UUID, String, UUID, UUID> {

    private static final long serialVersionUID = 2083543290;

    /**
     * Setter for <code>public.comment.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.comment.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.comment.content</code>.
     */
    public void setContent(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.comment.content</code>.
     */
    public String getContent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.comment.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.comment.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.comment.book_id</code>.
     */
    public void setBookId(UUID value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.comment.book_id</code>.
     */
    public UUID getBookId() {
        return (UUID) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, UUID, UUID> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Comment.COMMENT.CONTENT;
    }

    @Override
    public Field<UUID> field3() {
        return Comment.COMMENT.USER_ID;
    }

    @Override
    public Field<UUID> field4() {
        return Comment.COMMENT.BOOK_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContent();
    }

    @Override
    public UUID component3() {
        return getUserId();
    }

    @Override
    public UUID component4() {
        return getBookId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContent();
    }

    @Override
    public UUID value3() {
        return getUserId();
    }

    @Override
    public UUID value4() {
        return getBookId();
    }

    @Override
    public CommentRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(String value) {
        setContent(value);
        return this;
    }

    @Override
    public CommentRecord value3(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public CommentRecord value4(UUID value) {
        setBookId(value);
        return this;
    }

    @Override
    public CommentRecord values(UUID value1, String value2, UUID value3, UUID value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(UUID id, String content, UUID userId, UUID bookId) {
        super(Comment.COMMENT);

        set(0, id);
        set(1, content);
        set(2, userId);
        set(3, bookId);
    }
}
